// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Asset {
  id String @id @default(uuid())

  // information
  name       String   @db.TinyText
  isCensored Boolean  @default(false)
  meta       Json
  brandId    String?
  brand      Brand?   @relation(fields: [brandId], references: [id])
  ownerId    String?
  owner      Owner?   @relation(fields: [ownerId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  placeId    String?
  place      Place?   @relation(fields: [placeId], references: [id])

  // lifespan
  // multiple columns to same table, ref: https://github.com/prisma/prisma/discussions/17004
  startDate       DateTime
  startPrice      Float
  startCurrencyId String
  startCurrency   Currency @relation("AssetStartCurrency", fields: [startCurrencyId], references: [id])
  startMethodId   String
  startMethod     Method   @relation("AssetStartMethod", fields: [startMethodId], references: [id])
  startPlatformId String
  startPlatform   Platform @relation("AssetStartPlatform", fields: [startPlatformId], references: [id])

  endDate       DateTime?
  endPrice      Float?
  endCurrencyId String?
  endCurrency   Currency? @relation("AssetEndCurrency", fields: [endCurrencyId], references: [id])
  endMethodId   String?
  endMethod     Method?   @relation("AssetEndMethod", fields: [endMethodId], references: [id])
  endPlatformId String?
  endPlatform   Platform? @relation("AssetEndPlatform", fields: [endPlatformId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  PriceHistory PriceHistory[]
}

model Currency {
  id String @id @default(uuid())

  name    String @db.TinyText
  symbol  String @db.TinyText
  display String @db.TinyText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  StartCurrency Asset[] @relation("AssetStartCurrency")
  EndCurrency   Asset[] @relation("AssetEndCurrency")
}

model Brand {
  id String @id @default(uuid())

  name String @db.TinyText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  Asset Asset[]
}

// Purchase, selling platforms
model Platform {
  id String @id @default(uuid())

  name String @db.TinyText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  StartPlatform Asset[] @relation("AssetStartPlatform")
  EndPlatform   Asset[] @relation("AssetEndPlatform")
}

// Store place
model Place {
  id String @id @default(uuid())

  name String @db.TinyText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  Asset Asset[]
}

model Category {
  id String @id @default(uuid())

  name String @db.TinyText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  Asset Asset[]
}

model Owner {
  id String @id @default(uuid())

  name String @db.TinyText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  OwnershipHistory OwnershipHistory[]
  Asset            Asset[]
}

enum MethodType {
  BOTH
  START
  END
}

model Method {
  id String @id @default(uuid())

  name String     @db.TinyText
  type MethodType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText

  StartMethod Asset[] @relation("AssetStartMethod")
  EndMethod   Asset[] @relation("AssetEndMethod")
}

model Tag {
  id String @id @default(uuid())

  assetId String
  asset   Asset  @relation(fields: [assetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText
}

model OwnershipHistory {
  id String @id @default(uuid())

  ownerId   Owner     @relation(fields: [id], references: [id])
  startDate DateTime
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText
}

model PriceHistory {
  id String @id @default(uuid())

  assetId Asset @relation(fields: [id], references: [id])
  price   Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String?  @db.TinyText
}
